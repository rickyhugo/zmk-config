/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    macros {
        world_ao_base: world_ao {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp O &kp A>,
                <&macro_release>,
                <&kp RALT>;

            label = "WORLD_AO";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        world_ao_lsft: world_ao_lsft {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp O &kp LS(A)>,
                <&macro_release>,
                <&kp RALT>;

            label = "WORLD_AO_LSFT";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        world_ae_base: world_ae_base {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp DOUBLE_QUOTES &kp A>,
                <&macro_release>,
                <&kp RALT>;

            label = "WORLD_AE_BASE";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        world_ae_lsft: world_ae_lsft {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp DOUBLE_QUOTES &kp LS(A)>,
                <&macro_release>,
                <&kp RALT>;

            label = "WORLD_AE_LSFT";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        world_o_base: world_o_base {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp DOUBLE_QUOTES &kp O>,
                <&macro_release>,
                <&kp RALT>;

            label = "WORLD_O_BASE";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        world_o_lsft: world_o_lsft {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp DOUBLE_QUOTES &kp LS(O)>,
                <&macro_release>,
                <&kp RALT>;

            label = "WORLD_O_LSFT";
            wait-ms = <1>;
            tap-ms = <1>;
        };
    };

    behaviors {
        world_ao: world_ao {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_AO";
            bindings = <&world_ao_base>, <&world_ao_lsft>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        world_ae: world_ae {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_AE";
            bindings = <&world_ae_base>, <&world_ae_lsft>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        world_o: world_o {
            compatible = "zmk,behavior-mod-morph";
            label = "WORLD_O";
            bindings = <&world_o_base>, <&world_o_lsft>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty36 {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q       &kp W           &lt 9 E      &kp R            &kp T           &kp Y        &kp U        &kp I        &kp O       &kp P          &none
&none  &mt LGUI A  &mt LEFT_ALT S  &mt LCTRL D  &mt LSHFT F      &kp G           &kp H        &mt LSHFT J  &mt LCTRL K  &mt LALT L  &mt LGUI SEMI  &none
&none  &lt 8 Z     &kp X           &kp C        &kp V            &kp B           &kp N        &kp M        &kp COMMA    &kp DOT     &lt 7 SLASH    &none
                                   &lt 1 ESC    &lt 2 BACKSPACE  &lt 3 DELETE    &lt 4 ENTER  &lt 5 SPACE  &lt 6 TAB
            >;
        };

        media {
            bindings = <
&none  &bt BT_CLR  &bt BT_CLR_ALL  &none      &none      &none    &none          &none         &none         &none         &none         &none
&none  &kp LGUI    &kp LALT        &kp LCTRL  &kp LSHFT  &none    &kp LA(LC(S))  &kp C_PREV    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_NEXT    &none
&none  &none       &none           &none      &none      &none    &out OUT_USB   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &none
                                   &none      &none      &none    &kp C_STOP     &kp C_PP      &kp C_MUTE
            >;
        };

        navigation {
            bindings = <
&none  &none     &none     &none      &none      &none    &kp LC(Z)   &kp LC(X)  &kp LC(C)      &kp LC(V)    &kp LC(Y)  &none
&none  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none    &caps_word  &kp LEFT   &kp DOWN       &kp UP       &kp RIGHT  &none
&none  &none     &none     &none      &none      &none    &kp INSERT  &kp HOME   &kp PAGE_DOWN  &kp PAGE_UP  &kp END    &none
                           &none      &none      &none    &none       &none      &none
            >;
        };

        mouse {
            bindings = <
&none  &none     &none     &none      &none      &none    &kp LC(Z)   &kp LC(X)       &kp LC(C)       &kp LC(V)     &kp LC(Y)        &none
&none  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none    &caps_word  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &none
&none  &none     &none     &none      &none      &none    &none       &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &none
                           &none      &none      &none    &mkp RCLK   &mkp LCLK       &mkp MCLK
            >;
        };

        symbol {
            bindings = <
&trans  &kp LS(LEFT_BRACKET)  &kp LS(N7)  &kp LS(N8)     &kp LS(N9)  &kp LS(RIGHT_BRACKET)    &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp LS(SEMI)          &kp LS(N4)  &kp LS(N5)     &kp LS(N5)  &kp LS(EQUAL)            &trans  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &trans
&trans  &kp LS(GRAVE)         &kp LS(N1)  &kp LS(N2)     &kp LS(N3)  &kp LS(BACKSLASH)        &trans  &trans     &trans     &trans    &trans    &trans
                                          &kp LS(MINUS)  &kp LS(N9)  &kp LS(N0)               &trans  &trans     &trans
            >;
        };

        number {
            bindings = <
&trans  &kp LEFT_BRACKET  &kp N7  &kp N8     &kp N9   &kp RIGHT_BRACKET    &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp SEMI          &kp N4  &kp N5     &kp N5   &kp EQUAL            &trans  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &trans
&trans  &kp GRAVE         &kp N1  &kp N2     &kp N3   &kp BACKSLASH        &trans  &trans     &trans     &trans    &trans    &trans
                                  &kp MINUS  &kp DOT  &kp N0               &trans  &trans     &trans
            >;
        };

        function {
            bindings = <
&trans  &kp F12  &kp F7  &kp F8   &kp F9     &kp PRINTSCREEN    &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp F11  &kp F4  &kp F5   &kp F6     &kp SCROLLLOCK     &trans  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &trans
&trans  &kp F10  &kp F1  &kp F2   &kp F3     &kp PAUSE_BREAK    &trans  &trans     &trans     &trans    &trans    &trans
                         &kp TAB  &kp K_APP  &kp SPACE          &trans  &trans     &trans
            >;
        };

        world {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans        &trans     &trans     &trans     &trans    &trans  &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans        &trans     &world_ao  &world_ae  &world_o  &trans  &trans
&trans  &trans    &trans    &trans     &trans     &trans        &trans     &trans     &trans     &trans    &trans  &trans
                            &kp ESC    &kp BSPC   &kp DELETE    &kp ENTER  &kp SPACE  &kp TAB
            >;
        };

        button {
            bindings = <
&trans  &trans  &trans     &kp LC(Z)  &kp LC(Y)  &trans       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LALT   &kp LCTRL  &kp LSHFT  &trans       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LC(X)  &kp LC(C)  &kp LC(V)  &trans       &trans  &trans  &trans  &trans  &trans  &trans
                           &mkp MCLK  &mkp LCLK  &mkp RCLK    &trans  &trans  &trans
            >;
        };

        i3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans     &trans    &trans  &kp LG(LS(Q))  &trans      &trans      &trans      &trans
&trans  &trans  &trans  &trans  &kp LSHFT  &trans    &trans  &kp LG(N1)     &kp LG(N2)  &kp LG(N3)  &kp LG(N4)  &trans
&trans  &trans  &trans  &trans  &trans     &trans    &trans  &kp LG(N5)     &kp LG(N6)  &kp LG(N7)  &kp LG(N8)  &trans
                        &trans  &trans     &trans    &trans  &trans         &trans
            >;
        };
    };
};
